
import { GoogleGenAI, Modality } from "@google/genai";

const API_KEY = process.env.API_KEY;
if (!API_KEY) {
  throw new Error("API_KEY environment variable is not set");
}

const ai = new GoogleGenAI({ apiKey: API_KEY });

/**
 * Analyzes a style reference image and returns a detailed textual description.
 * @param imageBase64 The base64 encoded string of the style image.
 * @param mimeType The MIME type of the style image.
 * @returns A promise that resolves to a string describing the image style.
 */
export const describeImageStyle = async (imageBase64: string, mimeType: string): Promise<string> => {
  const model = 'gemini-2.5-flash';
  const prompt = `Analyze this image and describe its visual style in detail for an AI image generation prompt. Focus on:
- **Atmosphere and Mood:** (e.g., serene, energetic, minimalist, rustic, futuristic)
- **Lighting:** (e.g., soft and diffused, harsh and dramatic, warm afternoon sun, neon glow)
- **Color Palette:** (e.g., monochromatic, vibrant and saturated, pastel, earthy tones)
- **Composition and Background:** (e.g., clean studio, cluttered and textured, outdoor nature scene, abstract)
- **Overall Aesthetic:** (e.g., cinematic, commercial, vintage, hyperrealistic)
Provide a concise, descriptive paragraph.`;

  const response = await ai.models.generateContent({
    model: model,
    contents: {
      parts: [
        {
          inlineData: {
            data: imageBase64,
            mimeType: mimeType,
          },
        },
        { text: prompt },
      ],
    },
  });

  return response.text;
};

/**
 * Edits a product image based on a detailed text prompt using the Nano Banana model.
 * @param productImageBase64 The base64 encoded string of the product image.
 * @param mimeType The MIME type of the product image.
 * @param prompt The detailed prompt guiding the image generation.
 * @returns A promise that resolves to the base64 string of the generated image.
 */
export const editProductImage = async (
  productImageBase64: string,
  mimeType: string,
  prompt: string
): Promise<string> => {
  const model = 'gemini-2.5-flash-image-preview';

  const response = await ai.models.generateContent({
    model,
    contents: {
      parts: [
        {
          inlineData: {
            data: productImageBase64,
            mimeType: mimeType,
          },
        },
        {
          text: prompt,
        },
      ],
    },
    config: {
      responseModalities: [Modality.IMAGE, Modality.TEXT],
    },
  });

  // Find the first image part in the response
  for (const part of response.candidates[0].content.parts) {
    if (part.inlineData && part.inlineData.data) {
      return `data:${part.inlineData.mimeType};base64,${part.inlineData.data}`;
    }
  }

  throw new Error('No image was generated by the model.');
};
